void test_data_anls_03()
{

        // Set up variables for histogramming
        const double pTMin = 0.3;
        const double pTMax = 1.5;
            // Create histograms and profiles
        TH1F *hist = new TH1F("hist", "pt", 100, pTMin, pTMax);
        TH1F *hist2 = new TH1F("hist2", "eta", 100, -3, 3);
    // Open the ROOT file
    TFile *file = TFile::Open("pythia8MB_CR1_RHoff_1.root");
    //TTree *tree = (TTree*)file -> Get("pT_and_eta_tree;6");
    
    // Check if the file opened successfully
    if (!file || file->IsZombie())
    {
        std::cout << "Error opening the file." << std::endl;
        return;
    }

    // Loop over the events
    char eventnumber[30];
    for (Int_t j = 0; j <= 9999; ++j)
    {
        sprintf(eventnumber, "Event%d", j);

        // Get the tuple for the current event
        TNtuple *tuple = (TNtuple *)file->Get(eventnumber);
        if (!tuple)
        {
            std::cout << "Error accessing tuple " << eventnumber << std::endl;
            continue;
        }

        // Print the tuple contents
        //tuple->Print();

        // TTree *tree = (TTree*)file->Get("tree"); // Tree to store pt and eta values from events in Ntuple.

        // Access eta and pT data using SetBranchAddress
            Float_t eta;
            Float_t pt;
            
            tuple->SetBranchAddress("pt", &pt);
            tuple->SetBranchAddress("eta", &eta);


        // Get the number of entries (events) in the tuple
        Int_t nentries = tuple->GetEntries();
        for (Int_t i=0; i < nentries; i++) 
        {
            tuple->GetEntry(i);
            hist->Fill(pt);
            hist2->Fill(eta);
        }             

        if( j % 10000 == 0 ){ cout<<"event " <<j <<endl;}
    } // Ntuple reading loop ends

    file->Close();
    delete file;

            TFile *output = new TFile("output.root", "RECREATE");
        hist->Write();
        hist2->Write();
        delete hist2;
        delete hist;
        // b_corr_vs_width->Write();
        // profile_b_corr->Write();
        output->Close();
          delete output;
} // Function ends

